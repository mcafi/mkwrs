generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum console_type {
  HANDHELD
  HOME
  HYBRID
}

enum course_status {
  AVAILABLE
  UNLOCKABLE
  DLC
  NOT_AVAILABLE
}

enum character_status {
  AVAILABLE
  UNLOCKABLE
  DLC
  NOT_AVAILABLE
}

enum vehicle_selection {
  NO_VEHICLE
  VEHICLE
  VEHICLE_PARTS
}

enum record_class {
  CLASS150
  CLASS200
}

enum record_type {
  FULL
  FLAP
}

enum video_system {
  NTSC
  PAL
}

model Console {
  id           Int          @id @default(autoincrement())
  name         String
  slug         String
  release_year Int
  logo         String
  photo        String
  type         console_type
  Game         Game?
}

model Game {
  id           Int      @id @default(autoincrement())
  title        String
  slug         String
  release_year Int
  cover        String
  console      Console  @relation(fields: [console_id], references: [id])
  console_id   Int      @unique
  courses      Course[]
}

model Course {
  id            Int           @id @default(autoincrement())
  name          String
  slug          String
  icon          String
  course_status course_status
  game          Game          @relation(fields: [game_id], references: [id])
  game_id       Int           @unique
  tracks        Track[]
}

model Track {
  id             Int              @id @default(autoincrement())
  name           String
  photo          String
  lap_count      Int
  retro_track_id Int?
  retro_track    Track?           @relation("TrackToTrack", fields: [retro_track_id], references: [id])
  course         Course           @relation(fields: [course_id], references: [id])
  course_id      Int              @unique
  track          Track[]          @relation("TrackToTrack")
  records        RecordMetadata[]
}

model Charcter {
  id                Int                 @id @default(autoincrement())
  name              String
  photo             String
  MarioKart64Record MarioKart64Record[]
}

model Player {
  id      Int    @id @default(autoincrement())
  name    String
  country String
}

model RecordMetadata {
  id           Int                @id @default(autoincrement())
  time         Float
  track        Track              @relation(fields: [track_id], references: [id])
  track_id     Int
  mk_64_record MarioKart64Record?
  laps         Lap[]
}

model MarioKart64Record {
  id                 Int            @id @default(autoincrement())
  record_metadata    RecordMetadata @relation(fields: [record_metadata_id], references: [id])
  record_metadata_id Int            @unique
  record_type        record_type
  video_system       video_system
  // la conversione tra tempo PAL e NTSC avverr√† a runtime
  time               Float
  character          Charcter       @relation(fields: [character_id], references: [id])
  character_id       Int
}

model Lap {
  id                 Int            @id @default(autoincrement())
  time               Float
  record_metadata    RecordMetadata @relation(fields: [record_metadata_id], references: [id])
  record_metadata_id Int
}
